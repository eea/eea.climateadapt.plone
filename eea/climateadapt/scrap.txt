    <!-- <subscriber factory=".marshaller.TransnationalRegionModifier" -->
    <!--     provides="eea.rdfmarshaller.interfaces.ISurfResourceModifier" /> -->

    <!--<browser:page-->
        <!--name="get_indicator_message"-->
        <!--for="*"-->
        <!--permission="zope2.View"-->
        <!--class=".indicator.GetIndicator"-->
        <!--/>-->
    <!--<subscriber
       for="eea.climateadapt.browser.frontpage_slides.IRichImage
            zope.lifecycleevent.interfaces.IObjectCreatedEvent"
       handler=".events.set_title_description"
    /> -->
    <!-- <subscriber -->
    <!--     for="eea.climateadapt.aceitem.IPublicationReport -->
    <!--          Products.CMFCore.interfaces.IActionSucceededEvent" -->
    <!--     handler=".events.invalidate_cache_faceted_sections" -->
    <!--     /> -->
    <!--  -->
    <!-- <subscriber -->
    <!--     for="eea.climateadapt.aceitem.IPublicationReport -->
    <!--          zope.lifecycleevent.interfaces.IObjectModifiedEvent" -->
    <!--     handler=".events.invalidate_cache_faceted_sections" -->
    <!--     /> -->
    <!--  -->
    <!-- <subscriber -->
    <!--     for="eea.climateadapt.aceitem.IInformationPortal -->
    <!--          zope.lifecycleevent.interfaces.IObjectModifiedEvent" -->
    <!--     handler=".events.invalidate_cache_faceted_sections" -->
    <!--     /> -->
    <!--  -->
    <!-- <subscriber -->
    <!--     for="eea.climateadapt.aceitem.IInformationPortal -->
    <!--          Products.CMFCore.interfaces.IActionSucceededEvent" -->
    <!--     handler=".events.invalidate_cache_faceted_sections" -->
    <!--     /> -->
    <!--  -->
    <!-- <subscriber -->
    <!--     for="eea.climateadapt.aceitem.IGuidanceDocument -->
    <!--          zope.lifecycleevent.interfaces.IObjectModifiedEvent" -->
    <!--     handler=".events.invalidate_cache_faceted_sections" -->
    <!--     /> -->
    <!--  -->
    <!-- <subscriber -->
    <!--     for="eea.climateadapt.aceitem.IGuidanceDocument -->
    <!--          Products.CMFCore.interfaces.IActionSucceededEvent" -->
    <!--     handler=".events.invalidate_cache_faceted_sections" -->
    <!--     /> -->
    <!--  -->
    <!-- <subscriber -->
    <!--     for="eea.climateadapt.aceitem.ITool -->
    <!--          zope.lifecycleevent.interfaces.IObjectModifiedEvent" -->
    <!--     handler=".events.invalidate_cache_faceted_sections" -->
    <!--     /> -->
    <!--  -->
    <!-- <subscriber -->
    <!--     for="eea.climateadapt.aceitem.ITool -->
    <!--          Products.CMFCore.interfaces.IActionSucceededEvent" -->
    <!--     handler=".events.invalidate_cache_faceted_sections" -->
    <!--     /> -->
    <!--  -->
    <!-- <subscriber -->
    <!--     for="eea.climateadapt.aceitem.IOrganisation -->
    <!--          zope.lifecycleevent.interfaces.IObjectModifiedEvent" -->
    <!--     handler=".events.invalidate_cache_faceted_sections" -->
    <!--     /> -->
    <!--  -->
    <!-- <subscriber -->
    <!--     for="eea.climateadapt.aceitem.IOrganisation -->
    <!--          Products.CMFCore.interfaces.IActionSucceededEvent" -->
    <!--     handler=".events.invalidate_cache_faceted_sections" -->
    <!--     /> -->
    <!--  -->
    <!-- <subscriber -->
    <!--     for="eea.climateadapt.aceitem.IIndicator -->
    <!--          zope.lifecycleevent.interfaces.IObjectModifiedEvent" -->
    <!--     handler=".events.invalidate_cache_faceted_sections" -->
    <!--     /> -->
    <!--  -->
    <!-- <subscriber -->
    <!--     for="eea.climateadapt.aceitem.IIndicator -->
    <!--          Products.CMFCore.interfaces.IActionSucceededEvent" -->
    <!--     handler=".events.invalidate_cache_faceted_sections" -->
    <!--     /> -->
    <!--  -->
    <!-- <subscriber -->
    <!--     for="eea.climateadapt.aceitem.IAction -->
    <!--          zope.lifecycleevent.interfaces.IObjectModifiedEvent" -->
    <!--     handler=".events.invalidate_cache_faceted_sections" -->
    <!--     /> -->
    <!--  -->
    <!-- <subscriber -->
    <!--     for="eea.climateadapt.aceitem.IAction -->
    <!--          Products.CMFCore.interfaces.IActionSucceededEvent" -->
    <!--     handler=".events.invalidate_cache_faceted_sections" -->
    <!--     /> -->
    <!--  -->
    <!-- <subscriber -->
    <!--     for="eea.climateadapt.aceitem.IMapGraphDataset -->
    <!--          zope.lifecycleevent.interfaces.IObjectModifiedEvent" -->
    <!--     handler=".events.invalidate_cache_faceted_sections" -->
    <!--     /> -->
    <!--  -->
    <!-- <subscriber -->
    <!--     for="eea.climateadapt.aceitem.IMapGraphDataset -->
    <!--          Products.CMFCore.interfaces.IActionSucceededEvent" -->
    <!--     handler=".events.invalidate_cache_faceted_sections" -->
    <!--     /> -->
    <!--  -->
    <!-- <subscriber -->
    <!--     for="eea.climateadapt.aceitem.IResearchProject -->
    <!--          zope.lifecycleevent.interfaces.IObjectModifiedEvent" -->
    <!--     handler=".events.invalidate_cache_faceted_sections" -->
    <!--     /> -->
    <!--  -->
    <!-- <subscriber -->
    <!--     for="eea.climateadapt.aceitem.IResearchProject -->
    <!--          Products.CMFCore.interfaces.IActionSucceededEvent" -->
    <!--     handler=".events.invalidate_cache_faceted_sections" -->
    <!--     /> -->
    <!--  -->
    <!-- <subscriber -->
    <!--     for="eea.climateadapt.acemeasure.IAdaptationOption -->
    <!--          zope.lifecycleevent.interfaces.IObjectModifiedEvent" -->
    <!--     handler=".events.invalidate_cache_faceted_sections" -->
    <!--     /> -->
    <!--  -->
    <!-- <subscriber -->
    <!--     for="eea.climateadapt.acemeasure.IAdaptationOption -->
    <!--          Products.CMFCore.interfaces.IActionSucceededEvent" -->
    <!--     handler=".events.invalidate_cache_faceted_sections" -->
    <!--     /> -->
    <!--  -->
    <!-- <subscriber -->
    <!--     for="eea.climateadapt.acemeasure.ICaseStudy -->
    <!--          zope.lifecycleevent.interfaces.IObjectModifiedEvent" -->
    <!--     handler=".events.invalidate_cache_faceted_sections" -->
    <!--     /> -->
    <!--  -->
    <!-- <subscriber -->
    <!--     for="eea.climateadapt.acemeasure.ICaseStudy -->
    <!--          Products.CMFCore.interfaces.IActionSucceededEvent" -->
    <!--     handler=".events.invalidate_cache_faceted_sections" -->
    <!--     /> -->
    <!-- <subscriber -->
    <!--    for="eea.climateadapt.acemeasure.ICaseStudy -->
    <!--         zope.lifecycleevent.interfaces.IObjectAddedEvent" -->
    <!--    handler=".acemeasure.handle_for_arcgis_sync" -->
    <!-- /> -->


<!--       <li class="first submenu" style="display: none;"
          tal:define="item python: view.get_tile('s1')">
        <div class="case-studies-homepage-slider-image"
             tal:define="picture python: view.get_image(item.s1_primary_photo, 's1_primary_photo')">
          <img src="" tal:attributes = "src picture"
               alt="About Climate Change Adaptation in Europe" />
        </div>
        <div class="case-studies-homepage-slider-description">
          <h2 tal:content="item/s1_title"> Title </h2>
          <div tal:content="structure python: item.s1_description.output"> Description </div>
          <p>
            <a class="homepage-read-more" href="" tal:attributes="href item/s1_read_more_link" target="_blank">
                <img src="/++resource++eea.climateadapt/frontpage/ico-arrow.png" alt="arrow" />
                <span tal:content="item/s1_read_more_text | nothing"> Read more </span>
            </a>
          </p>
          <p style="font-size: 10px;"> Picture credit:
            <span tal:content="item/s1_photo_copyright | nothing"> </span>
          </p>
        </div>
      </li> -->

<!--       <li class="" style="display: none;" tal:define="item python: view.get_tile('s7')">
        <div class="case-studies-homepage-slider-image"
             tal:define="picture python: view.get_image(item.s7_primary_photo, 's7_primary_photo')">
          <img src="" tal:attributes = "src picture"
               alt="ECCA 2017" />
        </div>
        <div class="case-studies-homepage-slider-description" style="font-size: 11.4px;">
          <h2 tal:content="item/s7_title"> Title </h2>
          <div>
            <style scoped>
                p {
                    margin-bottom: 0 !important;
                }
            </style>
            <span tal:replace="structure python:item.s7_description.output"> Description </span>
          </div>
          <span tal:define="absolute view/context/absolute_url">
            <a class="homepage-read-more" href="" tal:attributes="href item/s7_read_more_link" target="_blank">
                <img src="/++resource++eea.climateadapt/frontpage/ico-arrow.png" alt="arrow" />
                <span tal:content="item/s7_read_more_text | nothing"> Read more </span>
            </a>
          </span>
        </div>
      </li> -->
# @indexer(IRichImage)
# def getObjSize_image(obj):
#     try:
#         primary_field_info = IPrimaryFieldInfo(obj)
#     except TypeError:
#         logger.warn(
#             u'Lookup of PrimaryField failed for {0} If renaming or importing '
#             u'please reindex!'.format(obj.absolute_url())
#         )
#
#         return
#
#     return obj.getObjSize(None, primary_field_info.value.size)



# form = self.request.form
#
# if form.get("is_volto", None) is not None:
#     file = self.request.stdin
#     return
#
# # NOTE:: the code below is no longer used, we only use the above method
#
# if form.get("format", None) == "html":
#     file = self.request.stdin
#     self.save_html_fields(form, file)
#     logger.info("Translate html")
#     return
#
# if (
#     form.get("one_step", None) == "true"
#     and form.get("is_cover", None) != "true"
# ):
#     uid = form.get("uid", None)
#     trans_obj_path = form.get("external-reference")
#     if "https://" in trans_obj_path:
#         site = portal.getSite()
#         trans_obj_path = "/cca" + \
#             trans_obj_path.split(site.absolute_url())[-1]
#     field = form.get("field", None)
#     if uid is not None and field is not None:
#         form.pop("uid", None)
#         form.pop("one_step", None)
#         form.pop("request-id", None)
#         form.pop("external-reference", None)
#         form.pop("target-language", None)
#         form.pop("field", None)
#         form.pop("source_lang", None)
#
#         if len(form.keys()) > 1 and "\n" in form:
#             # This was the case of
#             # /cca/de/eu-adaptation-policy/sector-policies/forestry/index_html
#             # where eTranslation added a new key in the form
#             # and this happened only for DE, resulting a single
#             # not translated title
#             # https://taskman.eionet.europa.eu/issues/155311#note-38
#             form.pop("\n", None)
#
#         translated = form.pop("translation", form.keys()[0]).strip()
#         translated = translated.decode("latin-1")
#         self.save_text_field(uid, field, translated, trans_obj_path)
#     else:
#         logger.info("Wrong callback data. Missing uid or field name.")
#     return
#
# if (
#     form.get("one_step", None) == "true"
#     and form.get("is_cover", None) == "true"
# ):
#     self.save_tile_field(form)
#     return
#
# deps = ["translation"]
# event.notify(InvalidateMemCacheEvent(raw=True, dependencies=deps))
# logger.info("Invalidate cache for dependencies: %s", ", ".join(deps))
#
# logger.info("Translate params all : %r", form)
#
# form.pop("request-id", None)
# target_language = form.pop("target-language", None)
#
# language = form.pop("source_lang", None)
#
# if language is None:
#     language = ITranslationContext(self.context).language
#
# original = form.pop("external-reference", "")
# original = normalize(original)
#
# logger.info("Translate params all : %r", form)
#
# translated = form.pop("translation", form.keys()[0]).strip()
#
# # translated = decode_text(translated)
# # it seems the EC service sends translated text in latin-1.
# # Please double-check, but the decode_text that automatically detects
# # the encoding doesn't seem to do a great job
#
# translated = translated.decode("latin-1")
#
# save_translation(original, translated, language, target_language)
#
# return (
#     '<a href="/@@translate-key?key=' + original + '">available translations</a>'
# )
#
# def save_tile_field(self, form):
#     """Save a simple text filed in a cover tile"""
#     field = form.get("field", None)
#     tile_id = form.get("tile_id", None)
#     if tile_id is not None and field is not None:
#         form.pop("uid", None)
#         form.pop("one_step", None)
#         form.pop("request-id", None)
#         trans_obj_path = form.get("external-reference")
#         form.pop("external-reference", None)
#         form.pop("target-language", None)
#         form.pop("field", None)
#         form.pop("source_lang", None)
#         form.pop("tile_id", None)
#         form.pop("is_cover", None)
#         translated = form.pop("translation", form.keys()[0]).strip()
#         # translated = translated.decode('latin-1')
#
#         tile_annot_id = "plone.tiles.data." + tile_id
#         site = portal.getSite()
#         if "https://" in trans_obj_path:
#             trans_obj_path = "/cca" + \
#                 trans_obj_path.split(site.absolute_url())[-1]
#         trans_obj = site.unrestrictedTraverse(trans_obj_path)
#         tile = trans_obj.__annotations__.get(tile_annot_id, None)
#
#         if not tile:
#             return
#
#         try:
#             update = tile.data
#         except AttributeError:
#             update = tile
#
#         translated_msg = translated
#         if translated_msg is not None:
#             update[field] = translated_msg
#
#         try:
#             trans_obj.__annotations__[tile_annot_id] = update
#         except Exception:
#             logger.info("One step: Error on saving translated tile field")
#             # import pdb; pdb.set_trace()

# def save_text_field(self, uid, field, value, trans_obj_path):
#     """Save the translated value of given field for specified obj by uid"""
#     site = portal.getSite()
#     # catalog = site.portal_catalog
#     # trans_obj = get_translation_object_from_uid(uid, catalog)
#     trans_obj = site.unrestrictedTraverse(trans_obj_path)
#
#     if value is not None and value != "":
#         force_unlock(trans_obj)
#         encoded_text = value.encode("latin-1")
#         have_change = False
#
#         try:
#             setattr(trans_obj, field, encoded_text)
#             have_change = True
#         except AttributeError:
#             logger.info(
#                 "One step: AttributeError for obj: %s key: %s",
#                 trans_obj.absolute_url(),
#                 field,
#             )
#
#         if have_change:
#             trans_obj._p_changed = True
#             trans_obj.reindexObject()
#
#         logger.info("One step: saved %s %s %s", uid, field, value)

# def save_html_fields(self, form, file):
#     """Get the translated html file, extract the values for each field and
#     update the related translation object.
#     """
#     site = portal.getSite()
#     trans_obj_path = form.get("external-reference")
#     if "https://" in trans_obj_path:
#         trans_obj_path = "/cca" + \
#             trans_obj_path.split(site.absolute_url())[-1]
#
#     form.pop("format")
#     form.pop("request-id")
#     form.pop("external-reference")
#     form.pop("source_lang")
#     form.pop("target-language")
#
#     # source_lang = form.get("source_lang")
#     # target_lang = form.get("target-language")
#     # logger.info("Translate %s to %s", source_lang, target_lang)
#
#     trans_obj = site.unrestrictedTraverse(trans_obj_path)
#     force_unlock(trans_obj)
#
#     if len(form.keys()) == 0:
#         logger.info("Empty form")  # TODO: Check why?
#         return
#
#     file.seek(0)
#     b64_str = file.read()
#     html_file = base64.decodestring(b64_str).decode("latin-1")
#     # logger.info(html_file)
#     # soup = BeautifulSoup(html_file, "html.parser")
#     soup = BeautifulSoup(html_file, "lxml")  # it's seems better
#     # for invalid HTML cases.
#
#     html_fields = soup.find_all(
#         "div", attrs={"class": "cca-translation-section"})
#
#     for field in html_fields:
#         field_name = field["data-field"]
#         html_value = field.decode_contents()
#         encoded_text = html_value.encode("latin-1")
#         setattr(trans_obj, field_name, RichTextValue(encoded_text))
#         trans_obj._p_changed = True
#         trans_obj.reindexObject(idxs=[field_name])
#
#     tiles = soup.find_all("div", attrs={"class": "cca-translation-tile"})
#
#     for field in tiles:
#         field_name = field["data-field"]
#         tile_id = field["data-tile-id"]
#         html_value = field.decode_contents()
#         encoded_text = html_value.encode("latin-1")
#         # tile = trans_obj.get_tile(tile_id)
#         tile_annot_id = "plone.tiles.data." + tile_id
#         tile = trans_obj.__annotations__.get(tile_annot_id, None)
#         if tile is not None:
#             try:
#                 update = tile.data
#             except AttributeError:
#                 update = tile
#             update["text"] = RichTextValue(encoded_text)
#             # tile.data.update(update)
#             trans_obj.__annotations__[tile_annot_id] = update
#             # trans_obj.reindexObject()
#         else:
#             logger.info("Cannot find tile")
#     logger.info("Html translation saved for %s", trans_obj.absolute_url())
# from eea.cache.event import InvalidateMemCacheEvent
# from zope import event
# from .interfaces import ITranslationContext
# from bs4 import BeautifulSoup
# from plone.app.textfield.value import RichTextValue
# normalize,
# save_translation,
